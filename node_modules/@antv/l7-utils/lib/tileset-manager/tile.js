var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target, mod));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/tileset-manager/tile.ts
var tile_exports = {};
__export(tile_exports, {
  SourceTile: () => SourceTile
});
module.exports = __toCommonJS(tile_exports);
var import_bbox_polygon = __toESM(require("@turf/bbox-polygon"));
var import_eventemitter3 = require("eventemitter3");
var import_types = require("./types");
var import_lonlat_tile = require("./utils/lonlat-tile");
var SourceTile = class extends import_eventemitter3.EventEmitter {
  constructor(options) {
    super();
    this.tileSize = 256;
    this.isVisible = false;
    this.isCurrent = false;
    this.isVisibleChange = false;
    this.loadedLayers = 0;
    this.isLayerLoaded = false;
    this.isLoad = false;
    this.isChildLoad = false;
    this.parent = null;
    this.children = [];
    this.data = null;
    this.properties = {};
    this.loadDataId = 0;
    const { x, y, z, tileSize, warp = true } = options;
    this.x = x;
    this.y = y;
    this.z = z;
    this.warp = warp || true;
    this.tileSize = tileSize;
  }
  get isLoading() {
    return this.loadStatus === import_types.LoadTileDataStatus.Loading;
  }
  get isLoaded() {
    return this.loadStatus === import_types.LoadTileDataStatus.Loaded;
  }
  get isFailure() {
    return this.loadStatus === import_types.LoadTileDataStatus.Failure;
  }
  setTileLayerLoaded() {
    this.isLayerLoaded = true;
  }
  get isCancelled() {
    return this.loadStatus === import_types.LoadTileDataStatus.Cancelled;
  }
  get isDone() {
    return [
      import_types.LoadTileDataStatus.Loaded,
      import_types.LoadTileDataStatus.Cancelled,
      import_types.LoadTileDataStatus.Failure
    ].includes(this.loadStatus);
  }
  get bounds() {
    return (0, import_lonlat_tile.tileToBounds)(this.x, this.y, this.z);
  }
  get bboxPolygon() {
    const [minLng, minLat, maxLng, maxLat] = this.bounds;
    const center = [(maxLng - minLng) / 2, (maxLat - minLat) / 2];
    const polygon = (0, import_bbox_polygon.default)(this.bounds, {
      properties: {
        key: this.key,
        id: this.key,
        bbox: this.bounds,
        center,
        meta: `
      ${this.key}
      `
      }
    });
    return polygon;
  }
  get key() {
    const key = `${this.x}_${this.y}_${this.z}`;
    return key;
  }
  layerLoad() {
    this.loadedLayers++;
    this.emit("layerLoaded");
  }
  async loadData({ getData, onLoad, onError }) {
    this.loadDataId++;
    const loadDataId = this.loadDataId;
    if (this.isLoading) {
      this.abortLoad();
    }
    this.abortController = new AbortController();
    this.loadStatus = import_types.LoadTileDataStatus.Loading;
    let tileData = null;
    let error;
    try {
      const { x, y, z, bounds, tileSize, warp } = this;
      const { warpX, warpY } = (0, import_lonlat_tile.getTileWarpXY)(x, y, z, warp);
      const { signal } = this.abortController;
      const params = { x: warpX, y: warpY, z, bounds, tileSize, signal, warp };
      tileData = await getData(params, this);
    } catch (err) {
      error = err;
    }
    if (loadDataId !== this.loadDataId) {
      return;
    }
    if (this.isCancelled && !tileData) {
      return;
    }
    if (error || !tileData) {
      this.loadStatus = import_types.LoadTileDataStatus.Failure;
      onError(error, this);
      return;
    }
    this.loadStatus = import_types.LoadTileDataStatus.Loaded;
    this.data = tileData;
    onLoad(this);
  }
  reloadData(params) {
    if (this.isLoading) {
      this.abortLoad();
    }
    this.loadData(params);
  }
  abortLoad() {
    if (this.isLoaded || this.isCancelled) {
      return;
    }
    this.loadStatus = import_types.LoadTileDataStatus.Cancelled;
    this.abortController.abort();
    if (this.xhrCancel) {
      this.xhrCancel();
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  SourceTile
});
